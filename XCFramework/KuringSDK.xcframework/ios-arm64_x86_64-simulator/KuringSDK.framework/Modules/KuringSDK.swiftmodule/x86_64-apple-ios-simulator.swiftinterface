// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name KuringSDK
import Combine
import Foundation
@_exported import KuringSDK
import Starscream
import Swift
import SwiftUI
import UIKit
import UserNotifications
import _Concurrency
public struct Staff : Swift.Decodable {
  public let name: Swift.String
  public let collegeName: Swift.String
  public let deptName: Swift.String
  public let major: Swift.String
  public let lab: Swift.String
  public let phone: Swift.String
  public let email: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public protocol SearcherDelegate : AnyObject {
  func searcher(_ searcher: KuringSDK.Searcher, didChangeState state: KuringSDK.Searcher.ConnectionState)
  func searcher(_ searcher: KuringSDK.Searcher, didReceiveError error: Swift.Error?)
  func searcher(_ searcher: KuringSDK.Searcher, didReceiveStaffList staffs: [KuringSDK.Staff])
  func searcher(_ searcher: KuringSDK.Searcher, didReceiveNoticeList notices: [KuringSDK.Notice])
  func searcherDidSendHeartbeat(_ searcher: KuringSDK.Searcher)
}
extension Swift.Set : Swift.RawRepresentable where Element : Swift.Decodable, Element : Swift.Encodable {
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
@_hasMissingDesignatedInitializers public class Searcher {
  public enum SearchType : Swift.String, Swift.Hashable, Swift.CaseIterable {
    case notice
    case staff
    public var koreanValue: Swift.String {
      get
    }
    public init?(rawValue: Swift.String)
    public typealias AllCases = [KuringSDK.Searcher.SearchType]
    public typealias RawValue = Swift.String
    public static var allCases: [KuringSDK.Searcher.SearchType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public enum ConnectionState : Swift.Int, Swift.Hashable {
    case connected
    case connecting
    case disconnected
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public var searchType: KuringSDK.Searcher.SearchType
  @KuringSDK.WebSocketConcurrenyObject public var connection: KuringSDK.Searcher.ConnectionState {
    get
    set
    _modify
  }
  weak public var delegate: KuringSDK.SearcherDelegate?
  @objc deinit
  @objc public func connect()
  @objc public func disconnect()
  public func reconnect()
  public func search(_ message: Swift.String, forType type: KuringSDK.Searcher.SearchType)
}
extension KuringSDK.Searcher : Starscream.WebSocketDelegate {
  public func didReceive(event: Starscream.WebSocketEvent, client: Starscream.WebSocket)
}
@propertyWrapper public class WebSocketConcurrenyObject {
  public var wrappedValue: KuringSDK.Searcher.ConnectionState {
    get
    set
  }
  public var state: KuringSDK.Searcher.ConnectionState
  public init(_ initialState: KuringSDK.Searcher.ConnectionState = .disconnected)
  @objc deinit
}
public enum NoticeType : Swift.Int, Swift.Hashable, Swift.CaseIterable {
  case 학사, 장학, 취창업, 국제, 학생, 산학, 일반, 도서관
  public static func from(_ string: Swift.String) -> KuringSDK.NoticeType
  public var koreanValue: Swift.String {
    get
  }
  public var stringValue: Swift.String {
    get
  }
  public var shortStringValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [KuringSDK.NoticeType]
  public typealias RawValue = Swift.Int
  public static var allCases: [KuringSDK.NoticeType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
extension Swift.Array : Swift.RawRepresentable where Element : Swift.Decodable, Element : Swift.Encodable {
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
public class Notification : Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  final public let articleID: Swift.String
  final public let subject: Swift.String
  final public let category: KuringSDK.NoticeType
  final public let baseURLString: Swift.String
  final public let postedAt: Foundation.TimeInterval
  final public let receivedAt: Foundation.TimeInterval
  public var isNew: Swift.Bool
  final public let tags: [Swift.String]
  public init(articleID: Swift.String, subject: Swift.String, categoryString: Swift.String, baseURLString: Swift.String, postedDateString: Swift.String)
  convenience public init?(userInfo: [Swift.String : Any])
  public typealias ID = Swift.String
  @objc deinit
}
public protocol KuringDelegate : AnyObject {
  func didReceiveNotification(_ notification: KuringSDK.Notification)
  func didReadyToCreateNotificationBanner(title: Swift.String, body: Swift.String, identifier: Swift.String)
  func didUpdateSubscription(_ subscription: KuringSDK.Subscription)
}
public class Notice : Swift.Identifiable, Swift.Codable, Swift.Hashable, Swift.RawRepresentable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: KuringSDK.Notice, rhs: KuringSDK.Notice) -> Swift.Bool
  public var id: Swift.String {
    get
  }
  final public let articleID: Swift.String
  final public let subject: Swift.String
  final public let category: KuringSDK.NoticeType
  final public let urlString: Swift.String
  public var postedAt: Foundation.TimeInterval {
    get
  }
  final public let tags: [Swift.String]
  public var isNew: Swift.Bool
  public var isRead: Swift.Bool
  public var isSubscribed: Swift.Bool
  public var rawValue: Swift.String {
    get
  }
  public init(articleID: Swift.String, subject: Swift.String, category: KuringSDK.NoticeType, urlString: Swift.String, postedDateString: Swift.String, tags: [Swift.String], isNew: Swift.Bool = false, isRead: Swift.Bool = false, isSubscribed: Swift.Bool)
  public func read()
  required public init(from decoder: Swift.Decoder) throws
  required public init?(rawValue: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public typealias ID = Swift.String
  public typealias RawValue = Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Kuring {
  public static var version: Swift.String {
    get
  }
  public static var apiKey: Swift.String {
    get
    set
  }
  public static var appsflyerKey: Swift.String {
    get
  }
  public static var appleID: Swift.String {
    get
  }
  public static var adUnitID: Swift.String {
    get
  }
  public static var notifications: [Swift.String : [KuringSDK.Notification]] {
    get
  }
  public static var hasNewNotification: Swift.Bool {
    get
    set
  }
  public static var isCustomNotificationEnabled: Swift.Bool {
    get
    set
  }
  public static func register(fcmToken: Swift.String, resultHandler: ((Swift.Result<Swift.Bool, Swift.Error>) -> Swift.Void)? = nil)
  public static func addDelegate<T>(_ delegate: T, forKey key: Swift.String) where T : KuringSDK.KuringDelegate
  public static func removeDelegate(forKey key: Swift.String)
  public static func removeAllDelegates()
  public static func removeNotification(at row: Swift.Int, forDate date: Swift.String)
  public static func application(_ application: UIKit.UIApplication, didReceiveRemoteNotification userInfo: [Swift.AnyHashable : Any])
  public static func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, willPresent notification: UserNotifications.UNNotification)
  public static func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, didReceive response: UserNotifications.UNNotificationResponse)
  public static func createSearcher(delegate: KuringSDK.SearcherDelegate) -> KuringSDK.Searcher
  public static func createNoticeListQuery(with params: KuringSDK.NoticeListQuery.Params) -> KuringSDK.NoticeListQuery
  public static func readNotice(id: Swift.String)
  public static func fetchSubscription(resultHandler: @escaping (Swift.Result<KuringSDK.Subscription, Swift.Error>) -> Swift.Void)
  public static func updateSubscription(categories: [Swift.String], resultHandler: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public static func sendFeedback(_ text: Swift.String, resultHandler: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public static var userID: Swift.String? {
    get
    set
  }
  public static var runAt: Swift.Double {
    get
  }
  public static var startedAt: Swift.Double {
    get
  }
  public static var lastRunAt: Swift.Double {
    get
  }
  public static var lastReadNotice: Swift.String? {
    get
    set
  }
  public static var readNoticeIDs: Swift.Set<Swift.String> {
    get
    set
  }
  public static var categoryStrings: [Swift.String] {
    get
    set
  }
  public static var subscribedCategories: [KuringSDK.NoticeType] {
    get
  }
  public static var lastRunDate: Foundation.Date {
    get
  }
  public static var isFirstRun: Swift.Bool {
    get
  }
  public static var appVersion: Swift.String? {
    get
  }
  public static func updateAppVersion(to version: Swift.String)
  public static var inAppReviewCount: Swift.Int {
    get
    set
  }
  public static var noticeBookmark: [KuringSDK.Notice] {
    get
    set
  }
  public static var cachedNotices: [Swift.String : KuringSDK.Notice] {
    get
    set
  }
  @objc deinit
}
public struct Feedback : Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  public let fcmToken: Swift.String
  public let content: Swift.String
  public typealias ID = Swift.String
}
extension KuringSDK.Feedback : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class NoticeListQuery {
  public struct Params {
    public init(type: KuringSDK.NoticeType, offset: Swift.UInt, max: Swift.UInt)
  }
  public func load(resultHandler: @escaping (Swift.Result<[KuringSDK.Notice], Swift.Error>) -> Swift.Void)
  @objc deinit
}
public struct Subscription : Swift.Identifiable {
  public let id: Swift.String
  public let categories: [Swift.String]
  public init(categories: [Swift.String])
  public typealias ID = Swift.String
}
extension KuringSDK.Searcher.SearchType : Swift.RawRepresentable {}
extension KuringSDK.Searcher.ConnectionState : Swift.RawRepresentable {}
extension KuringSDK.NoticeType : Swift.RawRepresentable {}
